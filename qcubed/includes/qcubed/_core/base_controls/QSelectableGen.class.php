<?php
	/**
	 * The abstract QSelectableGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QSelectableBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QSelectable class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * This event is triggered when selectable is created.
	 */
	class QSelectable_CreateEvent extends QJqUiEvent {
		const EventName = 'selectablecreate';
	}
	/**
	 * This event is triggered at the end of the select operation, on each element
	 * 		added to the selection.
	 */
	class QSelectable_SelectedEvent extends QJqUiEvent {
		const EventName = 'selectableselected';
	}
	/**
	 * This event is triggered during the select operation, on each element added
	 * 		to the selection.
	 */
	class QSelectable_SelectingEvent extends QJqUiEvent {
		const EventName = 'selectableselecting';
	}
	/**
	 * This event is triggered at the beginning of the select operation.
	 */
	class QSelectable_StartEvent extends QJqUiEvent {
		const EventName = 'selectablestart';
	}
	/**
	 * This event is triggered at the end of the select operation.
	 */
	class QSelectable_StopEvent extends QJqUiEvent {
		const EventName = 'selectablestop';
	}
	/**
	 * This event is triggered at the end of the select operation, on each element
	 * 		removed from the selection.
	 */
	class QSelectable_UnselectedEvent extends QJqUiEvent {
		const EventName = 'selectableunselected';
	}
	/**
	 * This event is triggered during the select operation, on each element
	 * 		removed from the selection.
	 */
	class QSelectable_UnselectingEvent extends QJqUiEvent {
		const EventName = 'selectableunselecting';
	}

	/* Custom "property" event classes for this control */

	/**
	 * @property boolean $Disabled Disables (true) or enables (false) the selectable. Can be set when
	 * 		initialising (first creating) the selectable.
	 * @property boolean $AutoRefresh This determines whether to refresh (recalculate) the position and size of
	 * 		each selectee at the beginning of each select operation. If you have many
	 * 		many items, you may want to set this to false and call the refresh method
	 * 		manually.
	 * @property mixed $Cancel Prevents selecting if you start on elements matching the selector.
	 * @property integer $Delay Time in milliseconds to define when the selecting should start. It helps
	 * 		preventing unwanted selections when clicking on an element.
	 * @property integer $Distance Tolerance, in pixels, for when selecting should start. If specified,
	 * 		selecting will not start until after mouse is dragged beyond distance.
	 * @property mixed $Filter The matching child elements will be made selectees (able to be selected).
	 * @property string $Tolerance Possible values: 'touch', 'fit'.
	 * 
	 * 
	 * fit: draggable overlaps the droppable
	 * 		entirely
	 * touch: draggable overlaps the droppable any amount
	 */

	class QSelectableGen extends QPanel	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var boolean */
		protected $blnDisabled = null;
		/** @var boolean */
		protected $blnAutoRefresh = null;
		/** @var mixed */
		protected $mixCancel = null;
		/** @var integer */
		protected $intDelay;
		/** @var integer */
		protected $intDistance;
		/** @var mixed */
		protected $mixFilter = null;
		/** @var string */
		protected $strTolerance = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
			$strJqOptions .= $this->makeJsProperty('AutoRefresh', 'autoRefresh');
			$strJqOptions .= $this->makeJsProperty('Cancel', 'cancel');
			$strJqOptions .= $this->makeJsProperty('Delay', 'delay');
			$strJqOptions .= $this->makeJsProperty('Distance', 'distance');
			$strJqOptions .= $this->makeJsProperty('Filter', 'filter');
			$strJqOptions .= $this->makeJsProperty('Tolerance', 'tolerance');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqControlId() {
			return $this->ControlId;
		}

		public function getJqSetupFunction() {
			return 'selectable';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			return  $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}


		/**
		 * Remove the selectable functionality completely. This will return the
		 * element back to its pre-init state.
		 */
		public function Destroy() {
			$this->CallJqUiMethod("destroy");
		}
		/**
		 * Disable the selectable.
		 */
		public function Disable() {
			$this->CallJqUiMethod("disable");
		}
		/**
		 * Enable the selectable.
		 */
		public function Enable() {
			$this->CallJqUiMethod("enable");
		}
		/**
		 * Get or set any selectable option. If no value is specified, will act as a
		 * getter.
		 * @param $optionName
		 * @param $value
		 */
		public function Option($optionName, $value = null) {
			$this->CallJqUiMethod("option", $optionName, $value);
		}
		/**
		 * Set multiple selectable options at once by providing an options object.
		 * @param $options
		 */
		public function Option1($options) {
			$this->CallJqUiMethod("option", $options);
		}
		/**
		 * Refresh the position and size of each selectee element. This method can be
		 * used to manually recalculate the position and size of each selectee
		 * element. Very useful if autoRefresh is set to false.
		 */
		public function Refresh() {
			$this->CallJqUiMethod("refresh");
		}


		public function __get($strName) {
			switch ($strName) {
				case 'Disabled': return $this->blnDisabled;
				case 'AutoRefresh': return $this->blnAutoRefresh;
				case 'Cancel': return $this->mixCancel;
				case 'Delay': return $this->intDelay;
				case 'Distance': return $this->intDistance;
				case 'Filter': return $this->mixFilter;
				case 'Tolerance': return $this->strTolerance;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'Disabled':
					try {
						$this->blnDisabled = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disabled', $this->blnDisabled);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AutoRefresh':
					try {
						$this->blnAutoRefresh = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'autoRefresh', $this->blnAutoRefresh);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Cancel':
					$this->mixCancel = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'cancel', $mixValue);
					}
					break;

				case 'Delay':
					try {
						$this->intDelay = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'delay', $this->intDelay);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Distance':
					try {
						$this->intDistance = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'distance', $this->intDistance);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Filter':
					$this->mixFilter = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'filter', $mixValue);
					}
					break;

				case 'Tolerance':
					try {
						$this->strTolerance = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'tolerance', $this->strTolerance);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
