<?php
	/**
	 * The abstract QTabsGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QTabsBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QTabs class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * This event is triggered when tabs is created.
	 */
	class QTabs_CreateEvent extends QJqUiEvent {
		const EventName = 'tabscreate';
	}
	/**
	 * This event is triggered when clicking a tab.
	 */
	class QTabs_SelectEvent extends QJqUiEvent {
		const EventName = 'tabsselect';
	}
	/**
	 * This event is triggered after the content of a remote tab has been loaded.
	 */
	class QTabs_LoadEvent extends QJqUiEvent {
		const EventName = 'tabsload';
	}
	/**
	 * This event is triggered when a tab is shown.
	 */
	class QTabs_ShowEvent extends QJqUiEvent {
		const EventName = 'tabsshow';
	}
	/**
	 * This event is triggered when a tab is added.
	 */
	class QTabs_AddEvent extends QJqUiEvent {
		const EventName = 'tabsadd';
	}
	/**
	 * This event is triggered when a tab is removed.
	 */
	class QTabs_RemoveEvent extends QJqUiEvent {
		const EventName = 'tabsremove';
	}
	/**
	 * This event is triggered when a tab is enabled.
	 */
	class QTabs_EnableEvent extends QJqUiEvent {
		const EventName = 'tabsenable';
	}
	/**
	 * This event is triggered when a tab is disabled.
	 */
	class QTabs_DisableEvent extends QJqUiEvent {
		const EventName = 'tabsdisable';
	}

	/* Custom "property" event classes for this control */

	/**
	 * @property boolean $Disabled Disables (true) or enables (false) the tabs. Can be set when initialising
	 * 		(first creating) the tabs.
	 * @property array $AjaxOptions Additional Ajax options to consider when loading tab content (see $.ajax).
	 * @property boolean $Cache Whether or not to cache remote tabs content, e.g. load only once or with
	 * 		every click. Cached content is being lazy loaded, e.g once and only once
	 * 		for the first click. Note that to prevent the actual Ajax requests from
	 * 		being cached by the browser you need to provide an extra cache: false flag
	 * 		to ajaxOptions.
	 * @property boolean $Collapsible Set to true to allow an already selected tab to become unselected again
	 * 		upon reselection.
	 * @property mixed $Cookie Store the latest selected tab in a cookie. The cookie is then used to
	 * 		determine the initially selected tab if the selected option is not defined.
	 * 		Requires cookie plugin, which can also be found in the
	 * 		development-bundle&gt;external folder from the download builder. The object
	 * 		needs to have key/value pairs of the form the cookie plugin expects as
	 * 		options. Available options (example): &#123; expires: 7, path: '/', domain:
	 * 		'jquery.com', secure: true &#125;. Since jQuery UI 1.7 it is also possible
	 * 		to define the cookie name being used via name property.
	 * @property boolean $Deselectable deprecated in jQuery UI 1.7, use collapsible.
	 * @property array $Disabled1 An array containing the position of the tabs (zero-based index) that should
	 * 		be disabled on initialization.
	 * @property string $Event The type of event to be used for selecting a tab.
	 * @property mixed $Fx Enable animations for hiding and showing tab panels. The duration option
	 * 		can be a string representing one of the three predefined speeds ("slow",
	 * 		"normal", "fast") or the duration in milliseconds to run an animation
	 * 		(default is "normal").
	 * @property string $IdPrefix If the remote tab, its anchor element that is, has no title attribute to
	 * 		generate an id from, an id/fragment identifier is created from this prefix
	 * 		and a unique id returned by $.data(el), for example "ui-tabs-54".
	 * @property string $PanelTemplate HTML template from which a new tab panel is created in case of adding a tab
	 * 		with the add method or when creating a panel for a remote tab on the fly.
	 * @property integer $Selected Zero-based index of the tab to be selected on initialization. To set all
	 * 		tabs to unselected pass -1 as value.
	 * @property string $Spinner The HTML content of this string is shown in a tab title while remote
	 * 		content is loading. Pass in empty string to deactivate that behavior. An
	 * 		span element must be present in the A tag of the title, for the spinner
	 * 		content to be visible.
	 * @property string $TabTemplate HTML template from which a new tab is created and added. The placeholders
	 * 		#&#123;href&#125; and #&#123;label&#125; are replaced with the url and tab
	 * 		label that are passed as arguments to the add method.
	 */

	class QTabsGen extends QPanel	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var boolean */
		protected $blnDisabled = null;
		/** @var array */
		protected $arrAjaxOptions = null;
		/** @var boolean */
		protected $blnCache = null;
		/** @var boolean */
		protected $blnCollapsible = null;
		/** @var mixed */
		protected $mixCookie = null;
		/** @var boolean */
		protected $blnDeselectable = null;
		/** @var array */
		protected $arrDisabled1 = null;
		/** @var string */
		protected $strEvent = null;
		/** @var mixed */
		protected $mixFx = null;
		/** @var string */
		protected $strIdPrefix = null;
		/** @var string */
		protected $strPanelTemplate = null;
		/** @var integer */
		protected $intSelected;
		/** @var string */
		protected $strSpinner = null;
		/** @var string */
		protected $strTabTemplate;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
			$strJqOptions .= $this->makeJsProperty('AjaxOptions', 'ajaxOptions');
			$strJqOptions .= $this->makeJsProperty('Cache', 'cache');
			$strJqOptions .= $this->makeJsProperty('Collapsible', 'collapsible');
			$strJqOptions .= $this->makeJsProperty('Cookie', 'cookie');
			$strJqOptions .= $this->makeJsProperty('Deselectable', 'deselectable');
			$strJqOptions .= $this->makeJsProperty('Disabled1', 'disabled');
			$strJqOptions .= $this->makeJsProperty('Event', 'event');
			$strJqOptions .= $this->makeJsProperty('Fx', 'fx');
			$strJqOptions .= $this->makeJsProperty('IdPrefix', 'idPrefix');
			$strJqOptions .= $this->makeJsProperty('PanelTemplate', 'panelTemplate');
			$strJqOptions .= $this->makeJsProperty('Selected', 'selected');
			$strJqOptions .= $this->makeJsProperty('Spinner', 'spinner');
			$strJqOptions .= $this->makeJsProperty('TabTemplate', 'tabTemplate');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqControlId() {
			return $this->ControlId;
		}

		public function getJqSetupFunction() {
			return 'tabs';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			return  $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}


		/**
		 * Remove the tabs functionality completely. This will return the element back
		 * to its pre-init state.
		 */
		public function Destroy() {
			$this->CallJqUiMethod("destroy");
		}
		/**
		 * Disable the tabs.
		 */
		public function Disable() {
			$this->CallJqUiMethod("disable");
		}
		/**
		 * Enable the tabs.
		 */
		public function Enable() {
			$this->CallJqUiMethod("enable");
		}
		/**
		 * Get or set any tabs option. If no value is specified, will act as a getter.
		 * @param $optionName
		 * @param $value
		 */
		public function Option($optionName, $value = null) {
			$this->CallJqUiMethod("option", $optionName, $value);
		}
		/**
		 * Set multiple tabs options at once by providing an options object.
		 * @param $options
		 */
		public function Option1($options) {
			$this->CallJqUiMethod("option", $options);
		}
		/**
		 * Add a new tab. The second argument is either a URL consisting of a fragment
		 * identifier only to create an in-page tab or a full url (relative or
		 * absolute, no cross-domain support) to turn the new tab into an Ajax
		 * (remote) tab. The third is the zero-based position where to insert the new
		 * tab. Optional, by default a new tab is appended at the end.
		 * @param $url
		 * @param $label
		 * @param $index
		 */
		public function Add($url, $label, $index = null) {
			$this->CallJqUiMethod("add", $url, $label, $index);
		}
		/**
		 * Remove a tab. The second argument is the zero-based index of the tab to be
		 * removed. Instead of an index, the href of the tab may be passed.
		 * @param $index
		 */
		public function Remove($index) {
			$this->CallJqUiMethod("remove", $index);
		}
		/**
		 * Enable a disabled tab.  To enable more than one tab at once reset the
		 * disabled property like: $('#example').tabs("option","disabled",[]);. The
		 * second argument is the zero-based index of the tab to be enabled. Instead
		 * of an index, the href of the tab may be passed.
		 * @param $index
		 */
		public function Enable1($index) {
			$this->CallJqUiMethod("enable", $index);
		}
		/**
		 * Disable a tab. The selected tab cannot be disabled. To disable more than
		 * one tab at once use: $('#example').tabs("option","disabled", [1, 2, 3]); 
		 * The second argument is the zero-based index of the tab to be disabled.
		 * Instead of an index, the href of the tab may be passed.
		 * @param $index
		 */
		public function Disable1($index) {
			$this->CallJqUiMethod("disable", $index);
		}
		/**
		 * Select a tab, as if it were clicked. The second argument is the zero-based
		 * index of the tab to be selected or the id selector of the panel the tab is
		 * associated with (the tab's href fragment identifier, e.g. hash, points to
		 * the panel's id).
		 * @param $index
		 */
		public function Select($index) {
			$this->CallJqUiMethod("select", $index);
		}
		/**
		 * Reload the content of an Ajax tab programmatically. This method always
		 * loads the tab content from the remote location, even if cache is set to
		 * true. The second argument is the zero-based index of the tab to be
		 * reloaded.
		 * @param $index
		 */
		public function Load($index) {
			$this->CallJqUiMethod("load", $index);
		}
		/**
		 * Change the url from which an Ajax (remote) tab will be loaded. The
		 * specified URL will be used for subsequent loads. Note that you can not only
		 * change the URL for an existing remote tab with this method, but also turn
		 * an in-page tab into a remote tab.  The second argument is the zero-based
		 * index of the tab of which its URL is to be updated.  The third is a URL the
		 * content of the tab is loaded from.
		 * @param $index
		 * @param $url
		 */
		public function Url($index, $url) {
			$this->CallJqUiMethod("url", $index, $url);
		}
		/**
		 * Retrieve the number of tabs of the first matched tab pane.
		 */
		public function Length() {
			$this->CallJqUiMethod("length");
		}
		/**
		 * Terminate all running tab ajax requests and animations.
		 */
		public function Abort() {
			$this->CallJqUiMethod("abort");
		}
		/**
		 * Set up an automatic rotation through tabs of a tab pane.  The second
		 * argument is an amount of time in milliseconds until the next tab in the
		 * cycle gets activated. Use 0 or null to stop the rotation.  The third
		 * controls whether or not to continue the rotation after a tab has been
		 * selected by a user. Default: false.
		 * @param $ms
		 * @param $continuing
		 */
		public function Rotate($ms, $continuing = null) {
			$this->CallJqUiMethod("rotate", $ms, $continuing);
		}


		public function __get($strName) {
			switch ($strName) {
				case 'Disabled': return $this->blnDisabled;
				case 'AjaxOptions': return $this->arrAjaxOptions;
				case 'Cache': return $this->blnCache;
				case 'Collapsible': return $this->blnCollapsible;
				case 'Cookie': return $this->mixCookie;
				case 'Deselectable': return $this->blnDeselectable;
				case 'Disabled1': return $this->arrDisabled1;
				case 'Event': return $this->strEvent;
				case 'Fx': return $this->mixFx;
				case 'IdPrefix': return $this->strIdPrefix;
				case 'PanelTemplate': return $this->strPanelTemplate;
				case 'Selected': return $this->intSelected;
				case 'Spinner': return $this->strSpinner;
				case 'TabTemplate': return $this->strTabTemplate;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'Disabled':
					try {
						$this->blnDisabled = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disabled', $this->blnDisabled);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AjaxOptions':
					try {
						$this->arrAjaxOptions = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'ajaxOptions', $this->arrAjaxOptions);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Cache':
					try {
						$this->blnCache = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'cache', $this->blnCache);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Collapsible':
					try {
						$this->blnCollapsible = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'collapsible', $this->blnCollapsible);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Cookie':
					$this->mixCookie = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'cookie', $mixValue);
					}
					break;

				case 'Deselectable':
					try {
						$this->blnDeselectable = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'deselectable', $this->blnDeselectable);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Disabled1':
					try {
						$this->arrDisabled1 = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disabled', $this->arrDisabled1);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Event':
					try {
						$this->strEvent = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'event', $this->strEvent);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Fx':
					$this->mixFx = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'fx', $mixValue);
					}
					break;

				case 'IdPrefix':
					try {
						$this->strIdPrefix = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'idPrefix', $this->strIdPrefix);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'PanelTemplate':
					try {
						$this->strPanelTemplate = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'panelTemplate', $this->strPanelTemplate);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Selected':
					try {
						$this->intSelected = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'selected', $this->intSelected);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Spinner':
					try {
						$this->strSpinner = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'spinner', $this->strSpinner);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'TabTemplate':
					try {
						$this->strTabTemplate = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'tabTemplate', $this->strTabTemplate);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
