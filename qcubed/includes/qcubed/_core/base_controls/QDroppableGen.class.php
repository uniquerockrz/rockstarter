<?php
	/**
	 * The abstract QDroppableGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QDroppableBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QDroppable class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * This event is triggered when droppable is created.
	 */
	class QDroppable_CreateEvent extends QJqUiEvent {
		const EventName = 'dropcreate';
	}
	/**
	 * This event is triggered any time an accepted draggable starts dragging.
	 * 		This can be useful if you want to make the droppable 'light up' when it can
	 * 		be dropped on.
	 */
	class QDroppable_ActivateEvent extends QJqUiEvent {
		const EventName = 'dropactivate';
	}
	/**
	 * This event is triggered any time an accepted draggable stops dragging.
	 */
	class QDroppable_DeactivateEvent extends QJqUiEvent {
		const EventName = 'dropdeactivate';
	}
	/**
	 * This event is triggered as an accepted draggable is dragged 'over' (within
	 * 		the tolerance of) this droppable.
	 */
	class QDroppable_OverEvent extends QJqUiEvent {
		const EventName = 'dropover';
	}
	/**
	 * This event is triggered when an accepted draggable is dragged out (within
	 * 		the tolerance of) this droppable.
	 */
	class QDroppable_OutEvent extends QJqUiEvent {
		const EventName = 'dropout';
	}
	/**
	 * This event is triggered when an accepted draggable is dropped 'over'
	 * 		(within the tolerance of) this droppable. In the callback, $(this)
	 * 		represents the droppable the draggable is dropped on.
	 * ui.draggable
	 * 		represents the draggable.
	 */
	class QDroppable_DropEvent extends QJqUiEvent {
		const EventName = 'drop';
	}

	/* Custom "property" event classes for this control */

	/**
	 * @property boolean $Disabled Disables (true) or enables (false) the droppable. Can be set when
	 * 		initialising (first creating) the droppable.
	 * @property mixed $Accept All draggables that match the selector will be accepted. If a function is
	 * 		specified, the function will be called for each draggable on the page
	 * 		(passed as the first argument to the function), to provide a custom filter.
	 * 		The function should return true if the draggable should be accepted.
	 * @property string $ActiveClass If specified, the class will be added to the droppable while an acceptable
	 * 		draggable is being dragged.
	 * @property boolean $AddClasses If set to false, will prevent the ui-droppable class from being added. This
	 * 		may be desired as a performance optimization when calling .droppable() init
	 * 		on many hundreds of elements.
	 * @property boolean $Greedy If true, will prevent event propagation on nested droppables.
	 * @property string $HoverClass If specified, the class will be added to the droppable while an acceptable
	 * 		draggable is being hovered.
	 * @property string $Scope Used to group sets of draggable and droppable items, in addition to
	 * 		droppable's accept option. A draggable with the same scope value as a
	 * 		droppable will be accepted.
	 * @property string $Tolerance Specifies which mode to use for testing whether a draggable is 'over' a
	 * 		droppable. Possible values: 'fit', 'intersect', 'pointer', 'touch'.
	 * 
	 * 
	 * fit:
	 * 		draggable overlaps the droppable entirely
	 * intersect: draggable overlaps the
	 * 		droppable at least 50%
	 * pointer: mouse pointer overlaps the droppable
	 * touch:
	 * 		draggable overlaps the droppable any amount
	 */

	abstract class QDroppableGen extends QControl	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var boolean */
		protected $blnDisabled = null;
		/** @var mixed */
		protected $mixAccept = null;
		/** @var string */
		protected $strActiveClass = null;
		/** @var boolean */
		protected $blnAddClasses = null;
		/** @var boolean */
		protected $blnGreedy = null;
		/** @var string */
		protected $strHoverClass = null;
		/** @var string */
		protected $strScope = null;
		/** @var string */
		protected $strTolerance = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
			$strJqOptions .= $this->makeJsProperty('Accept', 'accept');
			$strJqOptions .= $this->makeJsProperty('ActiveClass', 'activeClass');
			$strJqOptions .= $this->makeJsProperty('AddClasses', 'addClasses');
			$strJqOptions .= $this->makeJsProperty('Greedy', 'greedy');
			$strJqOptions .= $this->makeJsProperty('HoverClass', 'hoverClass');
			$strJqOptions .= $this->makeJsProperty('Scope', 'scope');
			$strJqOptions .= $this->makeJsProperty('Tolerance', 'tolerance');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqControlId() {
			return $this->ControlId;
		}

		public function getJqSetupFunction() {
			return 'droppable';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			return  $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}


		/**
		 * Remove the droppable functionality completely. This will return the element
		 * back to its pre-init state.
		 */
		public function Destroy() {
			$this->CallJqUiMethod("destroy");
		}
		/**
		 * Disable the droppable.
		 */
		public function Disable() {
			$this->CallJqUiMethod("disable");
		}
		/**
		 * Enable the droppable.
		 */
		public function Enable() {
			$this->CallJqUiMethod("enable");
		}
		/**
		 * Get or set any droppable option. If no value is specified, will act as a
		 * getter.
		 * @param $optionName
		 * @param $value
		 */
		public function Option($optionName, $value = null) {
			$this->CallJqUiMethod("option", $optionName, $value);
		}
		/**
		 * Set multiple droppable options at once by providing an options object.
		 * @param $options
		 */
		public function Option1($options) {
			$this->CallJqUiMethod("option", $options);
		}


		public function __get($strName) {
			switch ($strName) {
				case 'Disabled': return $this->blnDisabled;
				case 'Accept': return $this->mixAccept;
				case 'ActiveClass': return $this->strActiveClass;
				case 'AddClasses': return $this->blnAddClasses;
				case 'Greedy': return $this->blnGreedy;
				case 'HoverClass': return $this->strHoverClass;
				case 'Scope': return $this->strScope;
				case 'Tolerance': return $this->strTolerance;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'Disabled':
					try {
						$this->blnDisabled = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disabled', $this->blnDisabled);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Accept':
					$this->mixAccept = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'accept', $mixValue);
					}
					break;

				case 'ActiveClass':
					try {
						$this->strActiveClass = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'activeClass', $this->strActiveClass);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'AddClasses':
					try {
						$this->blnAddClasses = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'addClasses', $this->blnAddClasses);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Greedy':
					try {
						$this->blnGreedy = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'greedy', $this->blnGreedy);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'HoverClass':
					try {
						$this->strHoverClass = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'hoverClass', $this->strHoverClass);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Scope':
					try {
						$this->strScope = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'scope', $this->strScope);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Tolerance':
					try {
						$this->strTolerance = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'tolerance', $this->strTolerance);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
