<?php
	/**
	 * The abstract QSliderGen class defined here is
	 * code-generated and contains options, events and methods scraped from the
	 * JQuery UI documentation Web site. It is not generated by the typical
	 * codegen process, but rather is generated periodically by the core QCubed
	 * team and checked in. However, the code to generate this file is
	 * in the assets/_core/php/_devetools/jquery_ui_gen/jq_control_gen.php file
	 * and you can regenerate the files if you need to.
	 *
	 * The comments in this file are taken from the JQuery UI site, so they do
	 * not always make sense with regard to QCubed. They are simply provided
	 * as reference. Note that this is very low-level code, and does not always
	 * update QCubed state variables. See the QSliderBase 
	 * file, which contains code to interface between this generated file and QCubed.
	 *
	 * Because subsequent re-code generations will overwrite any changes to this
	 * file, you should leave this file unaltered to prevent yourself from losing
	 * any information or code changes.  All customizations should be done by
	 * overriding existing or implementing new methods, properties and variables
	 * in the QSlider class file.
	 *
	 */

	/* Custom event classes for this control */
	
	
	/**
	 * This event is triggered when slider is created.
	 */
	class QSlider_CreateEvent extends QJqUiEvent {
		const EventName = 'slidecreate';
	}
	/**
	 * This event is triggered when the user starts sliding.
	 */
	class QSlider_StartEvent extends QJqUiEvent {
		const EventName = 'slidestart';
	}
	/**
	 * This event is triggered on every mouse move during slide. Use ui.value
	 * 		(single-handled sliders) to obtain the value of the current handle,
	 * 		$(..).slider('value', index) to get another handles' value.
	 * Return false in
	 * 		order to prevent a slide, based on ui.value.
	 */
	class QSlider_SlideEvent extends QJqUiEvent {
		const EventName = 'slide';
	}
	/**
	 * This event is triggered on slide stop, or if the value is changed
	 * 		programmatically (by the value method).  Takes arguments event and ui.  Use
	 * 		event.originalEvent to detect whether the value changed by mouse, keyboard,
	 * 		or programmatically. Use ui.value (single-handled sliders) to obtain the
	 * 		value of the current handle, $(this).slider('values', index) to get another
	 * 		handle's value.
	 */
	class QSlider_ChangeEvent extends QJqUiEvent {
		const EventName = 'slidechange';
	}
	/**
	 * This event is triggered when the user stops sliding.
	 */
	class QSlider_StopEvent extends QJqUiEvent {
		const EventName = 'slidestop';
	}

	/* Custom "property" event classes for this control */

	/**
	 * @property boolean $Disabled Disables (true) or enables (false) the slider. Can be set when initialising
	 * 		(first creating) the slider.
	 * @property mixed $Animate Whether to slide handle smoothly when user click outside handle on the bar.
	 * 		Will also accept a string representing one of the three predefined speeds
	 * 		("slow", "normal", or "fast") or the number of milliseconds to run the
	 * 		animation (e.g. 1000).
	 * @property integer $Max The maximum value of the slider.
	 * @property integer $Min The minimum value of the slider.
	 * @property string $Orientation This option determines whether the slider has the min at the left, the max
	 * 		at the right or the min at the bottom, the max at the top. Possible values:
	 * 		'horizontal', 'vertical'.
	 * @property mixed $Range If set to true, the slider will detect if you have two handles and create a
	 * 		stylable range element between these two. Two other possible values are
	 * 		'min' and 'max'. A min range goes from the slider min to one handle. A max
	 * 		range goes from one handle to the slider max.
	 * @property integer $Step Determines the size or amount of each interval or step the slider takes
	 * 		between min and max. The full specified value range of the slider (max -
	 * 		min) needs to be evenly divisible by the step.
	 * @property integer $Value Determines the value of the slider, if there's only one handle. If there is
	 * 		more than one handle, determines the value of the first handle.
	 * @property array $Values This option can be used to specify multiple handles. If range is set to
	 * 		true, the length of 'values' should be 2.
	 */

	class QSliderGen extends QPanel	{
		protected $strJavaScripts = __JQUERY_EFFECTS__;
		protected $strStyleSheets = __JQUERY_CSS__;
		/** @var boolean */
		protected $blnDisabled = null;
		/** @var mixed */
		protected $mixAnimate = null;
		/** @var integer */
		protected $intMax = null;
		/** @var integer */
		protected $intMin;
		/** @var string */
		protected $strOrientation = null;
		/** @var mixed */
		protected $mixRange = null;
		/** @var integer */
		protected $intStep = null;
		/** @var integer */
		protected $intValue;
		/** @var array */
		protected $arrValues = null;
		
		protected function makeJsProperty($strProp, $strKey) {
			$objValue = $this->$strProp;
			if (null === $objValue) {
				return '';
			}

			return $strKey . ': ' . JavaScriptHelper::toJsObject($objValue) . ', ';
		}

		protected function makeJqOptions() {
			$strJqOptions = '';
			$strJqOptions .= $this->makeJsProperty('Disabled', 'disabled');
			$strJqOptions .= $this->makeJsProperty('Animate', 'animate');
			$strJqOptions .= $this->makeJsProperty('Max', 'max');
			$strJqOptions .= $this->makeJsProperty('Min', 'min');
			$strJqOptions .= $this->makeJsProperty('Orientation', 'orientation');
			$strJqOptions .= $this->makeJsProperty('Range', 'range');
			$strJqOptions .= $this->makeJsProperty('Step', 'step');
			$strJqOptions .= $this->makeJsProperty('Value', 'value');
			$strJqOptions .= $this->makeJsProperty('Values', 'values');
			if ($strJqOptions) $strJqOptions = substr($strJqOptions, 0, -2);
			return $strJqOptions;
		}

		public function getJqControlId() {
			return $this->ControlId;
		}

		public function getJqSetupFunction() {
			return 'slider';
		}

		public function GetControlJavaScript() {
			return sprintf('jQuery("#%s").%s({%s})', $this->getJqControlId(), $this->getJqSetupFunction(), $this->makeJqOptions());
		}

		public function GetEndScript() {
			return  $this->GetControlJavaScript() . '; ' . parent::GetEndScript();
		}
		
		/**
		 * Call a JQuery UI Method on the object. Takes variable number of arguments.
		 * 
		 * @param string $strMethodName the method name to call
		 * @internal param $mixed [optional] $mixParam1
		 * @internal param $mixed [optional] $mixParam2
		 */
		protected function CallJqUiMethod($strMethodName /*, ... */) {
			$args = func_get_args();

			$strArgs = JavaScriptHelper::toJsObject($args);
			$strJs = sprintf('jQuery("#%s").%s(%s)',
				$this->getJqControlId(),
				$this->getJqSetupFunction(),
				substr($strArgs, 1, strlen($strArgs)-2));	// params without brackets
			QApplication::ExecuteJavaScript($strJs);
		}


		/**
		 * Remove the slider functionality completely. This will return the element
		 * back to its pre-init state.
		 */
		public function Destroy() {
			$this->CallJqUiMethod("destroy");
		}
		/**
		 * Disable the slider.
		 */
		public function Disable() {
			$this->CallJqUiMethod("disable");
		}
		/**
		 * Enable the slider.
		 */
		public function Enable() {
			$this->CallJqUiMethod("enable");
		}
		/**
		 * Get or set any slider option. If no value is specified, will act as a
		 * getter.
		 * @param $optionName
		 * @param $value
		 */
		public function Option($optionName, $value = null) {
			$this->CallJqUiMethod("option", $optionName, $value);
		}
		/**
		 * Set multiple slider options at once by providing an options object.
		 * @param $options
		 */
		public function Option1($options) {
			$this->CallJqUiMethod("option", $options);
		}
		/**
		 * Gets or sets the value of the slider. For single handle sliders.
		 * @param $value
		 */
		public function Value($value = null) {
			$this->CallJqUiMethod("value", $value);
		}
		/**
		 * Gets or sets the values of the slider. For multiple handle or range
		 * sliders.
		 * @param $index
		 * @param $value
		 */
		public function Values($index, $value = null) {
			$this->CallJqUiMethod("values", $index, $value);
		}


		public function __get($strName) {
			switch ($strName) {
				case 'Disabled': return $this->blnDisabled;
				case 'Animate': return $this->mixAnimate;
				case 'Max': return $this->intMax;
				case 'Min': return $this->intMin;
				case 'Orientation': return $this->strOrientation;
				case 'Range': return $this->mixRange;
				case 'Step': return $this->intStep;
				case 'Value': return $this->intValue;
				case 'Values': return $this->arrValues;
				default: 
					try { 
						return parent::__get($strName); 
					} catch (QCallerException $objExc) { 
						$objExc->IncrementOffset(); 
						throw $objExc; 
					}
			}
		}

		public function __set($strName, $mixValue) {
			switch ($strName) {
				case 'Disabled':
					try {
						$this->blnDisabled = QType::Cast($mixValue, QType::Boolean);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'disabled', $this->blnDisabled);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Animate':
					$this->mixAnimate = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'animate', $mixValue);
					}
					break;

				case 'Max':
					try {
						$this->intMax = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'max', $this->intMax);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Min':
					try {
						$this->intMin = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'min', $this->intMin);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Orientation':
					try {
						$this->strOrientation = QType::Cast($mixValue, QType::String);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'orientation', $this->strOrientation);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Range':
					$this->mixRange = $mixValue;
				
					if ($this->Rendered) {
						$this->CallJqUiMethod('option', 'range', $mixValue);
					}
					break;

				case 'Step':
					try {
						$this->intStep = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'step', $this->intStep);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Value':
					try {
						$this->intValue = QType::Cast($mixValue, QType::Integer);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'value', $this->intValue);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}

				case 'Values':
					try {
						$this->arrValues = QType::Cast($mixValue, QType::ArrayType);
						if ($this->Rendered) {
							$this->CallJqUiMethod('option', 'values', $this->arrValues);
						}
						break;
					} catch (QInvalidCastException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}


				case 'Enabled':
					$this->Disabled = !$mixValue;	// Tie in standard QCubed functionality
					parent::__set($strName, $mixValue);
					break;
					
				default:
					try {
						parent::__set($strName, $mixValue);
						break;
					} catch (QCallerException $objExc) {
						$objExc->IncrementOffset();
						throw $objExc;
					}
			}
		}
	}

?>
